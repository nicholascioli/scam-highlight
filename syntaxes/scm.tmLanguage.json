{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Scam",
	"patterns": [
		{
			"include": "#expression"
		}
	],
	"repository": {
		"comments": {
			"patterns": [{
				"name": "comment.block.scm",
				"begin": ";\\$.*",
				"end": "",
				"patterns": [{ "include": "#consume" }]
			},
			{
				"name": "comment.block.scm",
				"begin": ";{",
				"end": ";}"
			}, {
				"name":"comment.line.scm",
				"match": ";([^\\n]+)?"
			}]
		},
		"consts": {
			"patterns": [{
				"name": "constant.language.scm",
				"match": "\\b(ScamArgs)\\b"
			}, {
				"name": "constant.language.boolean.true.scm",
				"match": "#t(?!#)\\b"
			}, {
				"name": "constant.language.boolean.false.scm",
				"match": "#f(?!#)\\b"
			}, {
				"name": "constant.language.boolean.null.scm",
				"match": "\\b(nil)\\b"
			}]
		},
		"consume": {
			"patterns": [{
				"name": "comment.block.scm",
				"match": ".*",
				"include": "#consume"
			}]
		},
		"expression": {
			"patterns": [
				{ "include": "#comments" },
				{ "include": "#consts" },
				{ "include": "#keywords" },
				{ "include": "#numbers" },
				{ "include": "#strings" },
				{ "include": "#symbols" },
				{ "include": "#operators" },
				{ "include": "#function-def" },
				{ "include": "#variable-def" },
				{ "include": "#function-name" },
				{ "include": "#variable-name" },
				{ "include": "#paren-expression" }
			]
		},
		"function-def": {
			"patterns": [{
				"begin": "\\b(define)\\s+\\((\\s*[^ \\)]+)",
				"end": "\\)",
				"beginCaptures": {
					"0": { "name": "function.group.begin.scm" },
					"1": { "name": "storage.type.function.scm" },
					"2": { "name": "entity.name.function.scm" }
				},
				"endCaptures": {
					"0": { "name": "function.group.end.scm"}
				},
				"name": "function.group.scm",
				"patterns": [{ "include": "#expression" }]
			}, {
				"begin": "\\b(lambda)\\s+\\(",
				"end": "\\)",
				"beginCaptures": {
					"0": { "name": "function.group.begin.scm" },
					"1": { "name": "keyword.other.lambda.scm"}
				},
				"endCaptures": {
					"0": { "name": "function.group.end.scm" }
				},
				"patterns": [{ "include": "#variable-name" }]
			}]
		},
		"function-name": {
			"patterns": [{
				"name": "entity.name.function.scm",
				"match": "(?<=\\()[^ \\t0123456789;,`'\"\\(\\)][^ ;,`'\"\\(\\)]*"
			}]
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.other.scm",
				"match": "\\b(inspect|setPort|fmt|println|getElement|open|list|length|print|sin|cos|eval|readExpr|abs)\\b"
			}, {
				"name": "storage.type.scm",
				"match": "\\b(int|real)\\b"
			}, {
				"name": "keyword.other.scm",
				"match": "string\\+"
			}, {
				"name": "keyword.control.scm",
				"match": "\\b(if|else|cond)\\b"
			}]
		},
		"numbers": {
			"patterns": [{
				"name":"constant.numeric.scm",
				"match": "-?[0-9]+(\\.[0-9]*)?"
			}]
		},
		"operators": {
			"patterns": [{
				"name": "keyword.operator.arithmetic.scm",
				"match": "[+*-/%^]"
			}, {
				"name": "keyword.operator.logical.scm",
				"match": "(or|and|not|!=|>=?|<=?|eq(ual)?\\?|==?|neq\\?)"
			}]
		},
		"paren-expression": {
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": { "name": "punctuation.paren.opens.scm" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.paren.close.scm" }
			},
			"name": "expression.group.scm",
			"patterns": [{ "include": "#expression" }]
		},
		"strings": {
			"name": "string.quoted.double.scm",
			"begin": "\"",
			"end": "\"",
			"patterns": [{
				"name": "constant.character.escape.scm",
				"match": "\\\\."
			}]
		},
		"symbols": {
			"patterns": [{
				"name": "support.type.property-name",
				"match": "'[^ \\(\\)]+"
			}]
		},
		"variable-def": {
			"name": "variable_def.group.scm",
			"patterns": [{
				"begin": "\\b(define)\\s+([^ \\t0123456789;,`'\"\\(\\)][^ ;,`'\"\\(\\)]*)",
				"end": "\\)",
				"beginCaptures": {
					"0": { "name": "variable_def.group.begin.scm" },
					"1": { "name": "storage.type.variable.scm" }
				},
				"endCaptures": {
					"0": { "name": "variable_def.group.end.scm"}
				},
				"patterns": [{ "include": "#expression" }]
			}]
		},
		"variable-name": {
			"name": "variable_name.group.scm",
			"patterns": [{
				"name":"variable.name.scm",
				"match": "[^ \\t0123456789;,`'\"\\(\\)][^ ;,`'\"\\(\\)]*"
			}]
		}
	},
	"scopeName": "source.scm"
}